// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(id, name)
VALUES (gen_random_uuid(), $1)
RETURNING id, name
`

type CreateUserRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, name string) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, name)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM users WHERE id = $1
`

type GetUserRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1
WHERE id = $2
RETURNING id, name
`

type UpdateUserParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

type UpdateUserRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Name, arg.ID)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
